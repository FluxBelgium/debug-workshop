{"version":3,"file":"mergesort-DD3ahA0G.js","sources":["../../src/mergesort/array.ts","../../src/mergesort/sort.ts","../../src/mergesort/main.ts"],"sourcesContent":["export const peekFirst = <T>(arr: T[]) => {\n  // Get the first element of the array\n  const first = arr[0];\n\n  return first;\n};\n\nexport const removeFirst = <T>(arr: T[]): T | undefined => {\n  // Get the first element of the array\n  const first = arr.pop();\n\n  return first;\n};\n\nexport const split = <T>(arr: T[], index: number): [T[], T[]] => {\n  // Check if the index is out of bounds\n  if (index < 0 || index >= arr.length) {\n    throw new Error(`Cannot split at ${index}: out of bounds`);\n  }\n\n  // Split the array into two halves\n  const left = arr.slice(0, index);\n  const right = arr.slice(index);\n\n  return [left, right];\n};\n","import { peekFirst, removeFirst, split } from \"./array\";\n\ntype Comparable = number | string | Date;\n\n/**\n * Sorts an array using the merge sort algorithm\n * @param arr the array to sort\n * @returns a new sorted array\n */\nconst mergeSort = <C extends Comparable>(arr: C[]): C[] => {\n  // Base case: an array of 0 or 1 elements is already sorted\n  if (arr.length <= 1) {\n    return arr;\n  }\n\n  // Calculate the center of the array\n  const center = Math.floor(arr.length / 2);\n\n  // Split the array into two halves\n  let [left, right] = split(arr, center);\n\n  // Recursively sort each half\n  left = mergeSort(left);\n  right = mergeSort(right);\n\n  // Merge the sorted halves\n  return merge(left, right);\n};\n\n/**\n * Merge two sorted arrays\n * @param left A sorted array\n * @param right A sorted array\n * @returns A new sorted array containing all elements from left and right\n */\nconst merge = <C extends Comparable>(left: C[], right: C[]): C[] => {\n  const results: C[] = [];\n\n  // While there are elements in both arrays\n  while (left.length && right.length) {\n    let smallest: C;\n\n    const leftFirst = peekFirst(left);\n    const rightFirst = peekFirst(right);\n\n    // Compare the first elements of each array\n    if (leftFirst <= rightFirst) {\n      smallest = removeFirst(left)!;\n    } else {\n      smallest = removeFirst(right)!;\n    }\n\n    // Add the smaller element to the results\n    results.push(smallest);\n  }\n\n  return [...results, ...left, ...right];\n};\n\nexport default mergeSort;\n","import sort from \"./sort\";\n\nconst parseNumbers = (input: string): number[] =>\n  input.split(\",\").map(parseFloat);\n\nconst printNumbers = (input: number[]): string =>\n    input.map(String).join(\", \");\n\nconst app = document.getElementById(\"app\")!;\n\nconst inputSection = document.createElement(\"section\");\nconst inputHeader = document.createElement(\"h1\");\nconst input = document.createElement(\"textarea\");\n\ninputHeader.textContent = \"Input\";\ninputSection.appendChild(inputHeader);\ninputSection.appendChild(input);\n\nconst button = document.createElement(\"button\");\nbutton.textContent = \"Sort\";\nbutton.addEventListener(\"click\", () => {\n  const unsorted = parseNumbers(input.value);\n  const sorted = sort(unsorted);\n\n  output.value = printNumbers(sorted);\n});\n\nconst outputSection = document.createElement(\"section\");\nconst outputHeader = document.createElement(\"h1\");\nconst output = document.createElement(\"textarea\");\n\noutputHeader.textContent = \"Output\";\noutputSection.appendChild(outputHeader);\noutputSection.appendChild(output);\n\napp.appendChild(inputSection);\napp.appendChild(outputSection);\napp.appendChild(button);\n\n"],"names":["peekFirst","arr","removeFirst","split","index","left","right","mergeSort","center","merge","results","smallest","leftFirst","rightFirst","parseNumbers","input","printNumbers","app","inputSection","inputHeader","button","unsorted","sorted","sort","output","outputSection","outputHeader"],"mappings":"6CAAa,MAAAA,EAAgBC,GAEbA,EAAI,CAAC,EAKRC,EAAkBD,GAEfA,EAAI,IAAI,EAKXE,EAAQ,CAAIF,EAAUG,IAA8B,CAE/D,GAAIA,EAAQ,GAAKA,GAASH,EAAI,OAC5B,MAAM,IAAI,MAAM,mBAAmBG,CAAK,iBAAiB,EAI3D,MAAMC,EAAOJ,EAAI,MAAM,EAAGG,CAAK,EACzBE,EAAQL,EAAI,MAAMG,CAAK,EAEtB,MAAA,CAACC,EAAMC,CAAK,CACrB,EChBMC,EAAmCN,GAAkB,CAErD,GAAAA,EAAI,QAAU,EACT,OAAAA,EAIT,MAAMO,EAAS,KAAK,MAAMP,EAAI,OAAS,CAAC,EAGxC,GAAI,CAACI,EAAMC,CAAK,EAAIH,EAAMF,EAAKO,CAAM,EAGrC,OAAAH,EAAOE,EAAUF,CAAI,EACrBC,EAAQC,EAAUD,CAAK,EAGhBG,EAAMJ,EAAMC,CAAK,CAC1B,EAQMG,EAAQ,CAAuBJ,EAAWC,IAAoB,CAClE,MAAMI,EAAe,CAAC,EAGf,KAAAL,EAAK,QAAUC,EAAM,QAAQ,CAC9B,IAAAK,EAEE,MAAAC,EAAYZ,EAAUK,CAAI,EAC1BQ,EAAab,EAAUM,CAAK,EAG9BM,GAAaC,EACfF,EAAWT,EAAYG,CAAI,EAE3BM,EAAWT,EAAYI,CAAK,EAI9BI,EAAQ,KAAKC,CAAQ,CAAA,CAGvB,MAAO,CAAC,GAAGD,EAAS,GAAGL,EAAM,GAAGC,CAAK,CACvC,ECvDMQ,EAAgBC,GACpBA,EAAM,MAAM,GAAG,EAAE,IAAI,UAAU,EAE3BC,EAAgBD,GAClBA,EAAM,IAAI,MAAM,EAAE,KAAK,IAAI,EAEzBE,EAAM,SAAS,eAAe,KAAK,EAEnCC,EAAe,SAAS,cAAc,SAAS,EAC/CC,EAAc,SAAS,cAAc,IAAI,EACzCJ,EAAQ,SAAS,cAAc,UAAU,EAE/CI,EAAY,YAAc,QAC1BD,EAAa,YAAYC,CAAW,EACpCD,EAAa,YAAYH,CAAK,EAE9B,MAAMK,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,YAAc,OACrBA,EAAO,iBAAiB,QAAS,IAAM,CAC/B,MAAAC,EAAWP,EAAaC,EAAM,KAAK,EACnCO,EAASC,EAAKF,CAAQ,EAErBG,EAAA,MAAQR,EAAaM,CAAM,CACpC,CAAC,EAED,MAAMG,EAAgB,SAAS,cAAc,SAAS,EAChDC,EAAe,SAAS,cAAc,IAAI,EAC1CF,EAAS,SAAS,cAAc,UAAU,EAEhDE,EAAa,YAAc,SAC3BD,EAAc,YAAYC,CAAY,EACtCD,EAAc,YAAYD,CAAM,EAEhCP,EAAI,YAAYC,CAAY,EAC5BD,EAAI,YAAYQ,CAAa,EAC7BR,EAAI,YAAYG,CAAM"}