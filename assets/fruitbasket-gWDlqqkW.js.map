{"version":3,"file":"fruitbasket-gWDlqqkW.js","sources":["../../src/fruitbasket/fruit.ts","../../src/fruitbasket/index.ts"],"sourcesContent":["export type Fruit = {\n    id: number,\n    name: string,\n    price: number,\n}\n\nexport type OrderItem = {\n    id: number,\n    quantity: number,\n}\n\nexport type Order = {\n    id: number,\n    items: OrderItem[],\n}\n\n/**\n * Gets a fruit by its id\n * @param fruits the list of fruits\n * @param id the id of the fruit to find\n * @returns the fruit with the given id, or undefined if not found\n */\nconst getFruitById = (fruits: Fruit[], id: number): Fruit | undefined => {\n    const fruit = fruits.find((fruit) => fruit.id === id);\n\n    return fruit;\n}\n\n/**\n * Gets the price of an order item\n * @param item the order item\n * @param fruits the list of fruits\n * @returns the price of the order item or 0 if the fruit is not found\n */\nconst getPrice = (item: OrderItem, fruits: Fruit[]): number => {\n    const fruit = getFruitById(fruits, item.id);\n\n    if (fruit) {\n        return fruit.price * item.quantity;\n    }\n\n    return 0;\n}\n\n/**\n * Gets the total price of an order\n * @param order the order to calculate the total for\n * @param fruits the list of fruits\n * @returns the total price of the order\n */\nexport const calculateTotal = (order: Order, fruits: Fruit[]) => {\n    let total = 0;\n\n    for (const item of order.items) {\n        const price = getPrice(item, fruits);\n        total += price;\n    }\n\n    return total;\n} ","import { calculateTotal, Fruit, Order } from \"./fruit\";\n\nconst fruits: Fruit[] = [\n    {\n        id: 1,\n        name: \"Apple\",\n        price: 1.5,\n    },\n    {\n        id: 2,\n        name: \"Banana\",\n        price: 0.5,\n    },\n    {\n        id: 3,\n        name: \"Orange\",\n        price: 2.5,\n    },\n]\n\n\nconst order: Order = {\n    id: 1,\n    items: [\n        {\n            id: 1,\n            quantity: 2,\n        },\n        {\n            id: 2,\n            quantity: 3,\n        },\n        {\n            id: 5,\n            quantity: 1,\n        }\n    ],\n}\n\nconst total = calculateTotal(order, fruits);\nconsole.log(`Total price: $${total.toFixed(2)}`);"],"names":["getFruitById","fruits","id","fruit","getPrice","item","calculateTotal","order","total","price"],"mappings":"6CAsBA,MAAMA,EAAe,CAACC,EAAiBC,IACrBD,EAAO,KAAME,GAAUA,EAAM,KAAOD,CAAE,EAWlDE,EAAW,CAACC,EAAiBJ,IAA4B,CAC3D,MAAME,EAAQH,EAAaC,EAAQI,EAAK,EAAE,EAE1C,OAAIF,EACOA,EAAM,MAAQE,EAAK,SAGvB,CACX,EAQaC,EAAiB,CAACC,EAAcN,IAAoB,CAC7D,IAAIO,EAAQ,EAED,UAAAH,KAAQE,EAAM,MAAO,CACtB,MAAAE,EAAQL,EAASC,EAAMJ,CAAM,EAC1BO,GAAAC,CAAA,CAGN,OAAAD,CACX,ECzDMP,EAAkB,CACpB,CACI,GAAI,EACJ,KAAM,QACN,MAAO,GACX,EACA,CACI,GAAI,EACJ,KAAM,SACN,MAAO,EACX,EACA,CACI,GAAI,EACJ,KAAM,SACN,MAAO,GAAA,CAEf,EAGMM,EAAe,CACjB,GAAI,EACJ,MAAO,CACH,CACI,GAAI,EACJ,SAAU,CACd,EACA,CACI,GAAI,EACJ,SAAU,CACd,EACA,CACI,GAAI,EACJ,SAAU,CAAA,CACd,CAER,EAEMC,EAAQF,EAAeC,EAAON,CAAM,EAC1C,QAAQ,IAAI,iBAAiBO,EAAM,QAAQ,CAAC,CAAC,EAAE"}